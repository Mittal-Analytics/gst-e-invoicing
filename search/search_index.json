{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started GitHub Link: https://github.com/Mittal-Analytics/gst-e-invoicing GST E-Invoicing library makes it easy to interact with GST E-Invoicing portal. It allows you to generate IRNs using your custom application. Quick Overview You can install the package using PIP pip install gst-e-invoicing You will also need to obtain the API credentials to use the library. Guide for obtaining the API credentials The library supports both the direct access as well as pass-through APIs provided by GSPs. from gst_irn import Session, get_invoice, get_seller_dtls from gst_irn.codes import States with open('public_key.pem') as f: public_key = f.read() session = Session( 'GSTIN', client_id='CLIENT_ID', client_secret='CLIENT_SECRET', username='USERNAME', password='PASSWORD', public_key=public_key, # use the sandbox url, or production url # or pass-through APIs provided by GSPs base_url='https://einv-apisandbox.nic.in', ) session.generate_token() # create invoice object # can also use the helper functions for the same invoice = { \"Version\": \"1.1\", \"TranDtls\": {\"TaxSch\": \"GST\", \"SupTyp\": \"B2B\"}, \"DocDtls\": { \"Typ\": \"inv\", \"No\": \"221\", \"Dt\": \"21/09/2021\", }, \"SellerDtls\": { \"Gstin\": \"09GSTNUMBER1Z5\", \"LglNm\": \"PARTY NAME\", \"Addr1\": \"Seller Address\", \"Loc\": \"City\", \"Pin\": 111111, \"Stcd\": States.UTTAR_PRADESH.value, }, \"BuyerDtls\": { \"Gstin\": \"37GSTNUMBER2ZP\", \"LglNm\": \"BUYER NAME\", \"Pos\": States.KOLKATA.value, \"Addr1\": \"Buyer Address\", \"Loc\": \"City\", \"Pin\": 555555, \"Stcd\": States.KOLKATA.value, }, \"ItemList\": [ { \"SlNo\": \"1\", \"IsServc\": \"Y\", \"HsnCd\": \"998431\", \"UnitPrice\": 100, \"IgstAmt\": 12, \"TotAmt\": 100, \"AssAmt\": 100, \"GstRt\": 12.0, \"TotItemVal\": 112, } ], \"ValDtls\": {\"TotInvVal\": 112, \"AssVal\": 100, \"IgstVal\": 12}, \"EwbDtls\": {\"Distance\": 10}, } # submit and get the e-invoice einvoice = session.generate_einvoice(invoice) # access irn and qr-code print(einvoice['Irn']) # prints irn # print qr-code from gst_irn.qr import get_qr_code_image_html qr_code_image = get_qr_code_image_html(einvoice['SignedQRCode']) qr_code_image # prints <img src=\"...\">","title":"Getting Started"},{"location":"#getting-started","text":"GitHub Link: https://github.com/Mittal-Analytics/gst-e-invoicing GST E-Invoicing library makes it easy to interact with GST E-Invoicing portal. It allows you to generate IRNs using your custom application.","title":"Getting Started"},{"location":"#quick-overview","text":"You can install the package using PIP pip install gst-e-invoicing You will also need to obtain the API credentials to use the library. Guide for obtaining the API credentials The library supports both the direct access as well as pass-through APIs provided by GSPs. from gst_irn import Session, get_invoice, get_seller_dtls from gst_irn.codes import States with open('public_key.pem') as f: public_key = f.read() session = Session( 'GSTIN', client_id='CLIENT_ID', client_secret='CLIENT_SECRET', username='USERNAME', password='PASSWORD', public_key=public_key, # use the sandbox url, or production url # or pass-through APIs provided by GSPs base_url='https://einv-apisandbox.nic.in', ) session.generate_token() # create invoice object # can also use the helper functions for the same invoice = { \"Version\": \"1.1\", \"TranDtls\": {\"TaxSch\": \"GST\", \"SupTyp\": \"B2B\"}, \"DocDtls\": { \"Typ\": \"inv\", \"No\": \"221\", \"Dt\": \"21/09/2021\", }, \"SellerDtls\": { \"Gstin\": \"09GSTNUMBER1Z5\", \"LglNm\": \"PARTY NAME\", \"Addr1\": \"Seller Address\", \"Loc\": \"City\", \"Pin\": 111111, \"Stcd\": States.UTTAR_PRADESH.value, }, \"BuyerDtls\": { \"Gstin\": \"37GSTNUMBER2ZP\", \"LglNm\": \"BUYER NAME\", \"Pos\": States.KOLKATA.value, \"Addr1\": \"Buyer Address\", \"Loc\": \"City\", \"Pin\": 555555, \"Stcd\": States.KOLKATA.value, }, \"ItemList\": [ { \"SlNo\": \"1\", \"IsServc\": \"Y\", \"HsnCd\": \"998431\", \"UnitPrice\": 100, \"IgstAmt\": 12, \"TotAmt\": 100, \"AssAmt\": 100, \"GstRt\": 12.0, \"TotItemVal\": 112, } ], \"ValDtls\": {\"TotInvVal\": 112, \"AssVal\": 100, \"IgstVal\": 12}, \"EwbDtls\": {\"Distance\": 10}, } # submit and get the e-invoice einvoice = session.generate_einvoice(invoice) # access irn and qr-code print(einvoice['Irn']) # prints irn # print qr-code from gst_irn.qr import get_qr_code_image_html qr_code_image = get_qr_code_image_html(einvoice['SignedQRCode']) qr_code_image # prints <img src=\"...\">","title":"Quick Overview"},{"location":"1.%20getting-credentials/","text":"Obtaining credentials for using the APIs There are 2 ways to use the APIs: Through Direct Access (for tax-payers with turnover > \u20b9500 Crores) Through pass-through APIs from GSPs (for ERP softwares and other tax-payers) Using Direct Access Tax payers with a turnover over \u20b9 500 Crores can use APIs directly. There are 4 major credentials: Client ID Client Secret API Username API Password You need to create the above credentials on sandbox. After testing the APIs on sandbox, you need to submit a report. You can then generate the credentials on production portal too. Using pass-through APIs from GSPs For users who don't have a direct access, they can use the pass-through APIs. Pass-through APIs are a mirror of direct APIs but are provided by a GSP (GST Suvidha Providers). The APIs provided by GSPs are either passthrough APIs or custom APIs. Passthrough APIs: these are mirror of direct APIs. These use the same payloads and encryption like the direct APIs. Custom APIs: these are custom APIs with different functionalities than the direct APIs. These are the commercials and supported APIs of few of the GSPs. GSP Cost / year API Calls Provide Passthrough APIs ClearTax 45,000 10,000 \u274c GST Zen 8,500 25,000 \u274c Adaequare 7,000 10,000 \u2705 WebTel 25,000 25,000 \u2705 TaxPro 1,050 5,000 \u2705","title":"Obtaining credentials for using the APIs"},{"location":"1.%20getting-credentials/#obtaining-credentials-for-using-the-apis","text":"There are 2 ways to use the APIs: Through Direct Access (for tax-payers with turnover > \u20b9500 Crores) Through pass-through APIs from GSPs (for ERP softwares and other tax-payers)","title":"Obtaining credentials for using the APIs"},{"location":"1.%20getting-credentials/#using-direct-access","text":"Tax payers with a turnover over \u20b9 500 Crores can use APIs directly. There are 4 major credentials: Client ID Client Secret API Username API Password You need to create the above credentials on sandbox. After testing the APIs on sandbox, you need to submit a report. You can then generate the credentials on production portal too.","title":"Using Direct Access"},{"location":"1.%20getting-credentials/#using-pass-through-apis-from-gsps","text":"For users who don't have a direct access, they can use the pass-through APIs. Pass-through APIs are a mirror of direct APIs but are provided by a GSP (GST Suvidha Providers). The APIs provided by GSPs are either passthrough APIs or custom APIs. Passthrough APIs: these are mirror of direct APIs. These use the same payloads and encryption like the direct APIs. Custom APIs: these are custom APIs with different functionalities than the direct APIs. These are the commercials and supported APIs of few of the GSPs. GSP Cost / year API Calls Provide Passthrough APIs ClearTax 45,000 10,000 \u274c GST Zen 8,500 25,000 \u274c Adaequare 7,000 10,000 \u2705 WebTel 25,000 25,000 \u2705 TaxPro 1,050 5,000 \u2705","title":"Using pass-through APIs from GSPs"},{"location":"2.%20using-pass-through-apis/","text":"Using passthrough APIs provided by GSPs User's who don't have access to direct APIs can use the passthrough APIs provided by GSPs. The details of this are provided in this guide . In case of passthrough APIs, the GSP provide a gsp_id and gsp_password instead of client_id and client_secret . We need to add these id and password in the request headers. The GSP uses them to validate and then replace these headers with their client_id and client_secret . The code for using GSP credentials is something like this (test with TaxPro's passthrough APIs): from gst_irn import Session gsp_headers = { \"aspid\": CONFIG[\"GSP_ASP_ID\"], \"password\": CONFIG[\"GSP_ASP_PASSWORD\"], } session = Session( gstin=CONFIG[\"GSP_GSTIN\"], client_id=\"\", client_secret=\"\", username=CONFIG[\"GSP_API_USERNAME\"], password=CONFIG[\"GSP_API_PASSWORD\"], public_key=CONFIG[\"PUBLIC_KEY\"], gsp_headers=gsp_headers, base_url=\"https://gstsandbox.charteredinfo.com/\", ) session.generate_token() details = session.get_gst_info(\"29AAACP7879D1Z0\")","title":"Using passthrough APIs provided by GSPs"},{"location":"2.%20using-pass-through-apis/#using-passthrough-apis-provided-by-gsps","text":"User's who don't have access to direct APIs can use the passthrough APIs provided by GSPs. The details of this are provided in this guide . In case of passthrough APIs, the GSP provide a gsp_id and gsp_password instead of client_id and client_secret . We need to add these id and password in the request headers. The GSP uses them to validate and then replace these headers with their client_id and client_secret . The code for using GSP credentials is something like this (test with TaxPro's passthrough APIs): from gst_irn import Session gsp_headers = { \"aspid\": CONFIG[\"GSP_ASP_ID\"], \"password\": CONFIG[\"GSP_ASP_PASSWORD\"], } session = Session( gstin=CONFIG[\"GSP_GSTIN\"], client_id=\"\", client_secret=\"\", username=CONFIG[\"GSP_API_USERNAME\"], password=CONFIG[\"GSP_API_PASSWORD\"], public_key=CONFIG[\"PUBLIC_KEY\"], gsp_headers=gsp_headers, base_url=\"https://gstsandbox.charteredinfo.com/\", ) session.generate_token() details = session.get_gst_info(\"29AAACP7879D1Z0\")","title":"Using passthrough APIs provided by GSPs"},{"location":"3.%20library-documentation/","text":"Documentation of the Library Session The usual workflow in GST portal is as follows: Generate session token Use the token for accessing the APIs The library works in the same manner: from gst_irn import Session session = Session( # ... credentials ) # generate token session.generate_token() # use the APIs session.get_gst_info('GSTNUMBER') The session object has following functions. All the functions handle the encryption and authentication automatically. session.generate_token(force_regenerate_token=False, cache_dir=\"tokens_cache\") Generates token for the session. The auth session generated by the IRP (Invoice Registration Portal) is valid for 6 hours (1 hour in sandbox). The portal recommends re-using that auth token till expiry. The library tries to cache the auth token and reuse it till expiry. The cache is saved in the cache_dir . The directory is created if it doesn't exist. Passing force_regenerate_token as true force regenerates the token. session.get(url, headers_extra=None) Sends a GET request to the given url. We can pass a dictionary of any extra headers if the API requires. The function returns the decrypted JSON response. session.post(url, data, headers_extra=None) Sends a POST request to the given url. The data / payload is automatically encrypted using the public key. We can pass a dictionary of any extra headers if the API requires. The function returns the decrypted JSON response. session.get_gst_info(party_gstin) Returns the GST info for the given GST number (string). The structure of the JSON response is documented at https://einv-apisandbox.nic.in/version1.04/get-gstin-details.html#responsePayload . session.generate_e_invoice(invoice) Generates the IRN for the given invoice. The invoice argument is a Python dict . It is automatically converted to JSON internally. The schema for the invoice is available at https://einvoice1.gst.gov.in/Documents/EINVOICE_SCHEMA.xlsx The JSON response is documented at https://einv-apisandbox.nic.in/version1.03/generate-irn.html#responsePayload . Other API endpoints The GST Portal has multiple other endpoints . These are for generating e-waybills, cancelling IRNs or fetching info of any doc. These endpoints can be accessed using the session.get and session.post methods above.","title":"Documentation of the Library"},{"location":"3.%20library-documentation/#documentation-of-the-library","text":"","title":"Documentation of the Library"},{"location":"3.%20library-documentation/#session","text":"The usual workflow in GST portal is as follows: Generate session token Use the token for accessing the APIs The library works in the same manner: from gst_irn import Session session = Session( # ... credentials ) # generate token session.generate_token() # use the APIs session.get_gst_info('GSTNUMBER') The session object has following functions. All the functions handle the encryption and authentication automatically.","title":"Session"},{"location":"3.%20library-documentation/#sessiongenerate_tokenforce_regenerate_tokenfalse-cache_dirtokens_cache","text":"Generates token for the session. The auth session generated by the IRP (Invoice Registration Portal) is valid for 6 hours (1 hour in sandbox). The portal recommends re-using that auth token till expiry. The library tries to cache the auth token and reuse it till expiry. The cache is saved in the cache_dir . The directory is created if it doesn't exist. Passing force_regenerate_token as true force regenerates the token.","title":"session.generate_token(force_regenerate_token=False, cache_dir=\"tokens_cache\")"},{"location":"3.%20library-documentation/#sessiongeturl-headers_extranone","text":"Sends a GET request to the given url. We can pass a dictionary of any extra headers if the API requires. The function returns the decrypted JSON response.","title":"session.get(url, headers_extra=None)"},{"location":"3.%20library-documentation/#sessionposturl-data-headers_extranone","text":"Sends a POST request to the given url. The data / payload is automatically encrypted using the public key. We can pass a dictionary of any extra headers if the API requires. The function returns the decrypted JSON response.","title":"session.post(url, data, headers_extra=None)"},{"location":"3.%20library-documentation/#sessionget_gst_infoparty_gstin","text":"Returns the GST info for the given GST number (string). The structure of the JSON response is documented at https://einv-apisandbox.nic.in/version1.04/get-gstin-details.html#responsePayload .","title":"session.get_gst_info(party_gstin)"},{"location":"3.%20library-documentation/#sessiongenerate_e_invoiceinvoice","text":"Generates the IRN for the given invoice. The invoice argument is a Python dict . It is automatically converted to JSON internally. The schema for the invoice is available at https://einvoice1.gst.gov.in/Documents/EINVOICE_SCHEMA.xlsx The JSON response is documented at https://einv-apisandbox.nic.in/version1.03/generate-irn.html#responsePayload .","title":"session.generate_e_invoice(invoice)"},{"location":"3.%20library-documentation/#other-api-endpoints","text":"The GST Portal has multiple other endpoints . These are for generating e-waybills, cancelling IRNs or fetching info of any doc. These endpoints can be accessed using the session.get and session.post methods above.","title":"Other API endpoints"},{"location":"4.%20handling-errors/","text":"Handling Errors The session raises RequestError for failed requests. The error contains the raw response and can be catched like this: from gst_irn import RequestError try: session.generate_e_invoice() except RequestError as err: resp_json = err.args[1]","title":"Handling Errors"},{"location":"4.%20handling-errors/#handling-errors","text":"The session raises RequestError for failed requests. The error contains the raw response and can be catched like this: from gst_irn import RequestError try: session.generate_e_invoice() except RequestError as err: resp_json = err.args[1]","title":"Handling Errors"}]}